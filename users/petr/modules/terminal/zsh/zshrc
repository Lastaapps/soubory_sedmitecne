
export RUST_SRC_PATH=$(rustc --print sysroot)/lib/rustlib/src/rust/library/

export PATH="$PATH:$HOME/.local/bin"

# Android paths
export PATH="$PATH:$HOME/Android/Sdk/cmdline-tools/latest/bin"
export PATH="$PATH:$HOME/Android/Sdk/emulator"
export PATH="$PATH:$HOME/Android/Sdk/platform-tools"

export GPG_TTY=$(tty)
export PINENTRY_MODE=ncurses

# Remove duplicate commands
setopt      "histignorealldups"
setopt      "HIST_EXPIRE_DUPS_FIRST"
setopt      "HIST_IGNORE_DUPS"
setopt      "HIST_IGNORE_ALL_DUPS"
setopt      "HIST_IGNORE_SPACE"
setopt      "HIST_FIND_NO_DUPS"
setopt      "HIST_SAVE_NO_DUPS"

setopt      "SHARE_HISTORY"
setopt      "HIST_FCNTL_LOCK"

bindkey "^N" fzf-cd-widget

# ArchWiki
autoload -Uz compinit promptinit
compinit
promptinit

zmodload zsh/complist
_comp_options+=(globdots)		# Include hidden files.
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate # menu select
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion::complete:*' gain-privileges 1


# Theme
# prompt walters
# prompt elite2 yellow


# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi


# History keybinds
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search


# Ctrl + Arrows
key[Control-Left]="${terminfo[kLFT5]}"
key[Control-Right]="${terminfo[kRIT5]}"
[[ -n "${key[Control-Left]}"  ]] && bindkey -- "${key[Control-Left]}"  backward-word
[[ -n "${key[Control-Right]}" ]] && bindkey -- "${key[Control-Right]}" forward-word




setopt AUTO_PUSHD PUSHD_SILENT PUSHD_TO_HOME

## Remove duplicate entries
setopt PUSHD_IGNORE_DUPS

## This reverts the +/- operators.
setopt PUSHD_MINUS


# Help command setup
autoload -Uz run-help
(( ${+aliases[run-help]} )) && unalias run-help
alias help=run-help



###############################################################################
# Some commands can be run under root only
###############################################################################
confirm_wrapper() {
    if [ "$1" = '--root' ]; then
        local as_root='true'
        shift
    fi

    local prefix=''

    if [ "${as_root}" = 'true' ] && [ "${USER}" != 'root' ]; then
        prefix="sudo"
    fi
    confirm ${prefix} "$@"
}

poweroff() { confirm_wrapper --root $0 "$@"; }
reboot() { confirm_wrapper --root $0 "$@"; }
hibernate() { confirm_wrapper --root $0 "$@"; }

# mkcd() { mkdir -p "$@" && cd "$1"; }
mkcd() { mkdir -p "$@"; cd "$1"; }

# https://git-scm.com/book/en/v2/Appendix-A:-Git-in-Other-Environments-Git-in-Zsh
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%b'
# RPROMPT='${vcs_info_msg_0_}'
# PROMPT='${vcs_info_msg_0_}%# '


# git-promt.sh config
# https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE="non_empty_value"
GIT_PS1_SHOWSTASHSTATE="non_empty_value"
GIT_PS1_SHOWUNTRACKEDFILES="non_empty_value"
GIT_PS1_SHOWUPSTREAM="auto"
GIT_PS1_SHOWCONFLICTSTATE="yes"
GIT_PS1_STATESEPARATOR=""

function prompt_basename {
    path="$1"
    if [[ -z "${path}" ]]; then
	echo ""
    else
	echo "(${path##*/}) "
    fi
}

# https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html
# %(x.true-text.false-text)
# ?                      # True if the exit status of the last command was n.
# '%m'                   # HOSTNAME
# '%n'                   # USERNAME
# '%E'                   # clear to end of line
# '%B (%b)'              # start (stop) boldface mode
# '%F{blue} (%f)'        # foreground color
# '%K{blue} (%k)'        # background color
# '%S (%s)'              # stand out mode
# '%W'                   # date
# '%*'                   # time with seconds
# '%j'                   # current number of jobs
# '%~'                   # current work dir, home replaced by ~
# '%-1d'                 # current work dir - last segment
# '%(!.#.\$)'            # $ or # based on privileges
# ${vcs_info_msg_0_}     # git info provided by vcs_info
# $(__git_ps1 " (%s)")   # git info provided by git-prompt.sh
PROMPT='%k %(?..%F{blue}[%F{253}%?%F{blue}] )%B%F{cyan}%1~%F{red} $vcs_info_msg_0_%F{cyan}%b%f%k'
PROMPT=''
PROMPT=${PROMPT}'%F{yellow}[%D{%Y-%m-%dT%H:%M:%S}]:%f '                    # date-time
PROMPT=${PROMPT}'%B%F{green}%n@%m%f%b '                # user@host
PROMPT=${PROMPT}'%(j..%F{blue}%Sâ†¯%j%s%f )'             # current number of jobs
PROMPT=${PROMPT}'%B%F{cyan}%~%f%b '                                  # current work dir, home replaced by ~
# PROMPT=${PROMPT}'%B%F{red}${vcs_info_msg_0_}%f%b '
PROMPT=${PROMPT}'%B%F{red}$(__git_ps1 "(%s) ")%f%b'
PROMPT=${PROMPT}'%F{blue}$(prompt_basename "$DIRENV_DIR")%f'
PROMPT=${PROMPT}'%F{green}$(prompt_basename "$VIRTUAL_ENV")%f'
PROMPT=${PROMPT}$'\n'
PROMPT=${PROMPT}'%(!.#.\$)'                            # $ or # based on privileges
PROMPT=${PROMPT}' '


# extended globbing, awesome!
setopt extendedGlob
# Turn on command substitution in the prompt (and parameter expansion and arithmetic expansion).
setopt promptsubst

# End stolen from Github


autoload bashcompinit
bashcompinit

